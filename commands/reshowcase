#!/usr/bin/env node

const fs = require("fs");
const path = require("path");
const os = require("os");
const esbuild = require("esbuild");
const { htmlPlugin } = require("@craftamap/esbuild-plugin-html");

const toAbsolutePath = (filepath) => {
  if (path.isAbsolute(filepath)) {
    return filepath;
  } else {
    return path.join(process.cwd(), filepath);
  }
};

const getRequiredPathValue = (name) => {
  const prefix = `--${name}=`;
  const arg = process.argv.find((item) => item.startsWith(prefix));
  if (arg === undefined) {
    console.error(`Please pass ${name} path: ${prefix}...`);
    process.exit(1);
  } else {
    const value = arg.replace(prefix, "");
    if (value === "") {
      console.error(`${name} path can't be empty`);
      process.exit(1);
    } else {
      return toAbsolutePath(value);
    }
  }
};

const task = process.argv[2];

if (task !== "build" && task !== "start") {
  console.error(
    "You need to pass 'start' or 'build' command and path to the entry point.\nFor example: reshowcase start --entry=./example/Demo.bs.js"
  );
  process.exit(1);
}

// Servers can handle paths to HTML files differently.
// Allow using full path to HTML template in "src" attribute of iframe in case of possible issues.
const useFullframeUrl = (() => {
  const prefix = `--full-iframe-url=`;
  const arg = process.argv.find((item) => item.startsWith(prefix));
  if (arg === undefined) {
    return false;
  } else {
    const value = arg.replace(prefix, "");
    if (value === "true") {
      return true;
    } else {
      return false;
    }
  }
})();

const isBuild = task === "build";

const entryPath = getRequiredPathValue("entry");

if (!fs.existsSync(entryPath)) {
  console.error(`Entry file not found here: ${entryPath}`);
  process.exit(1);
}

const outputPath = getRequiredPathValue("output");

const customConfig = (() => {
  const configDir = path.join(process.cwd(), ".reshowcase");

  if (!fs.existsSync(configDir)) {
    return {};
  } else {
    const configFilenames = fs.readdirSync(configDir);
    const configFilename = configFilenames.find(
      (filename) => filename === "config.cjs" || filename === "config.js"
    );
    if (configFilename === undefined) {
      return {};
    } else {
      try {
        const pathToConfig = path.join(configDir, configFilename);
        const config_ = require(pathToConfig);
        return config_;
      } catch (error) {
        console.error("Failed to read config:", error);
        return {};
      }
    }
  }
})();

// entryPoint passed to htmlPlugin must be relative to the root of user's project
const compiledProjectRoot = getRequiredPathValue("compiledProjectRoot");

const entryPathRelativeTocompiledProjectRoot = path.relative(
  compiledProjectRoot,
  entryPath
);

console.log({ compiledProjectRoot });
console.log({ entryPathRelativeTocompiledProjectRoot });

const defaultConfig = {
  entryPoints: [entryPath],
  bundle: true,
  outdir: outputPath,
  // publicPath: "",
  format: "esm",
  minify: isBuild,
  metafile: true,
  splitting: true,
  treeShaking: true,
  logLevel: "info",
  define: {
    USE_FULL_IFRAME_URL: JSON.stringify(useFullframeUrl),
  },
  plugins: [
    htmlPlugin({
      files: [
        {
          filename: "index.html",
          entryPoints: [entryPathRelativeTocompiledProjectRoot],
          htmlTemplate: path.join(__dirname, "./ui-template.html"),
          scriptLoading: "module",
        },
      ],
    }),
    htmlPlugin({
      files: [
        {
          filename: "./demo/index.html",
          entryPoints: [entryPathRelativeTocompiledProjectRoot],
          htmlTemplate: process.argv.find((item) =>
            item.startsWith("--template=")
          )
            ? path.join(
                process.cwd(),
                process.argv
                  .find((item) => item.startsWith("--template="))
                  .replace(/--template=/, "")
              )
            : path.join(__dirname, "./demo-template.html"),
          scriptLoading: "module",
        },
      ],
    }),
  ],
};

console.log({ outputPath });

const config = {
  ...defaultConfig,
  ...customConfig,
  define: { ...defaultConfig.define, ...(customConfig.define || {}) },
  plugins: [...defaultConfig.plugins, ...(customConfig.plugins || [])],
};

if (isBuild) {
  const durationLabel = "[Reshowcase] Bundle finished. Duration:";
  console.log("[Reshowcase] Bundling with esbuild...");
  console.time(durationLabel);
  esbuild
    .build(config)
    .then((_buildResult) => {
      console.timeEnd(durationLabel);
      const json = JSON.stringify(_buildResult.metafile);
      fs.writeFileSync(
        "/Users/denstr/projects/ahrefs-reshowcase/meta.json",
        json
      );
    })
    .catch((error) => {
      console.error("[Reshowcase] Build failed:", error);
      process.exit(1);
    });
} else {
  esbuild
    .context(config)
    .then((ctx) => {
      return ctx.watch().then((_) => ctx);
    })
    .then((ctx) => {
      return ctx.serve();
    })
    .then((serveResult) => {
      console.log({ serveResult });
    });
}
